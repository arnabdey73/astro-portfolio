---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BackToTop from '../components/BackToTop.astro';
import { getProjects, getPersonalInfo } from '../utils/portfolio-data.js';

const personalInfo = getPersonalInfo();
const allProjects = getProjects();

// Extract all unique technology tags for filtering
const allTags = [...new Set(allProjects.flatMap(project => project.technologies))];
---

<Layout 
  title={`Projects | ${personalInfo.name} - Portfolio`}
  description={`Explore projects built by ${personalInfo.name}, including cloud infrastructure, DevOps automation, and open source work.`}
>
  <Header />
  
  <main class="bg-white dark:bg-gray-900">
    <!-- Hero Section -->
    <section class="relative py-12 sm:py-16 lg:py-20 overflow-hidden">
      <!-- Projects-themed Background Pattern -->
      <div class="absolute inset-0 bg-gradient-to-br from-violet-50 via-purple-50 to-fuchsia-50 dark:from-gray-900 dark:via-violet-900 dark:to-purple-900"></div>
      
      <!-- Development Tools Pattern -->
      <div class="absolute inset-0 opacity-10 dark:opacity-20">
        <svg class="w-full h-full" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
          <defs>
            <pattern id="dev-pattern" x="0" y="0" width="100" height="100" patternUnits="userSpaceOnUse">
              <g fill="none" stroke="currentColor" stroke-width="1" class="text-violet-600 dark:text-violet-400">
                <!-- Git branch -->
                <circle cx="20" cy="20" r="3" fill="currentColor"/>
                <circle cx="20" cy="50" r="3" fill="currentColor"/>
                <circle cx="50" cy="35" r="3" fill="currentColor"/>
                <path d="M20,23 L20,47" stroke-width="2"/>
                <path d="M23,20 Q35,20 47,35" stroke-width="2" fill="none"/>
                <!-- Folder -->
                <path d="M60,20 L60,15 L65,15 L70,20 L80,20 L80,30 L60,30 Z" fill="currentColor" opacity="0.3"/>
                <!-- Terminal -->
                <rect x="15" y="60" width="30" height="20" rx="2" fill="none" stroke="currentColor"/>
                <path d="M18,66 L22,70 L18,74" stroke="currentColor" stroke-width="1" fill="none"/>
                <line x1="25" y1="73" x2="35" y2="73" stroke="currentColor"/>
                <!-- Code tags -->
                <path d="M60,60 L55,70 L60,80" stroke="currentColor" stroke-width="2" fill="none"/>
                <path d="M80,60 L85,70 L80,80" stroke="currentColor" stroke-width="2" fill="none"/>
              </g>
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#dev-pattern)"/>
        </svg>
      </div>

      <!-- Floating Development Elements -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-20 left-12 transform -rotate-12 opacity-20 dark:opacity-30">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-3 shadow-lg text-xs font-mono text-gray-700 dark:text-gray-300">
            <div class="text-violet-600 dark:text-violet-400">git commit</div>
            <div class="text-purple-600 dark:text-purple-400">-m "feat"</div>
          </div>
        </div>
        
        <div class="absolute top-40 right-16 transform rotate-12 opacity-20 dark:opacity-30">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-3 shadow-lg text-xs font-mono text-gray-700 dark:text-gray-300">
            <div class="text-blue-600 dark:text-blue-400">docker</div>
            <div class="text-cyan-600 dark:text-cyan-400">build .</div>
          </div>
        </div>
        
        <div class="absolute bottom-32 left-20 transform -rotate-6 opacity-20 dark:opacity-30">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-3 shadow-lg text-xs font-mono text-gray-700 dark:text-gray-300">
            <div class="text-green-600 dark:text-green-400">npm run</div>
            <div class="text-emerald-600 dark:text-emerald-400">deploy</div>
          </div>
        </div>
      </div>

      <!-- Animated Background Shapes -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-40 -left-40 w-80 h-80 bg-gradient-to-r from-violet-400 to-purple-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob"></div>
        <div class="absolute -bottom-40 -right-40 w-80 h-80 bg-gradient-to-r from-fuchsia-400 to-pink-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-2000"></div>
        <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-r from-purple-400 to-violet-400 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
      </div>

      <!-- Hero Content -->
      <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-3xl font-extrabold text-gray-900 dark:text-white sm:text-4xl sm:tracking-tight lg:text-5xl">
            Projects
          </h1>
          <p class="mt-6 max-w-2xl mx-auto text-xl text-gray-600 dark:text-gray-300">
            A collection of my professional work and open-source projects.
          </p>
        </div>
      </div>
    </section>

    <!-- Project Filtering -->
    <section class="py-8 border-b border-gray-200 dark:border-gray-700">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex flex-wrap items-center justify-between">
          <h2 class="text-lg font-medium text-gray-900 dark:text-white mb-4 sm:mb-0">
            Filter projects
          </h2>
          <div class="flex flex-wrap gap-2" id="filter-buttons">
            <button class="filter-btn active px-4 py-2 rounded-md text-sm font-medium bg-indigo-100 text-indigo-800 dark:bg-indigo-900 dark:text-indigo-200" data-filter="all">
              All Projects
            </button>
            {allTags.map(tag => (
              <button class="filter-btn px-4 py-2 rounded-md text-sm font-medium bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-200 hover:bg-indigo-100 hover:text-indigo-800 dark:hover:bg-indigo-900 dark:hover:text-indigo-200" data-filter={tag}>
                {tag}
              </button>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Projects Grid -->
    <section class="py-12 sm:py-16 lg:py-20">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="grid gap-8 md:grid-cols-2 lg:grid-cols-3" id="projects-grid">
          {allProjects.map((project: any) => (
            <div class="project-card group bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-xl transition-all duration-300 transform hover:-translate-y-1" data-tags={project.technologies.join(',')}>
              <!-- Project thumbnail -->
              <div class="relative h-48 overflow-hidden">
                <img 
                  src={project.thumbnailUrl} 
                  alt={`${project.title} project thumbnail`}
                  class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105"
                  loading="lazy"
                />
                
                <!-- Overlay for better text readability -->
                <div class="absolute inset-0 bg-black bg-opacity-20 group-hover:bg-opacity-30 transition-all duration-300"></div>
                
                <!-- Technology badges overlay -->
                <div class="absolute top-3 right-3">
                  <div class="flex flex-wrap gap-1 justify-end">
                    {project.technologies.slice(0, 2).map((tech: string) => (
                      <span class="px-2 py-1 text-xs bg-white bg-opacity-90 text-gray-800 rounded-full backdrop-blur-sm">
                        {tech}
                      </span>
                    ))}
                    {project.technologies.length > 2 && (
                      <span class="px-2 py-1 text-xs bg-white bg-opacity-90 text-gray-800 rounded-full backdrop-blur-sm">
                        +{project.technologies.length - 2}
                      </span>
                    )}
                  </div>
                </div>
                
                <!-- Featured badge -->
                {project.featured && (
                  <div class="absolute top-3 left-3">
                    <span class="px-3 py-1 text-xs bg-indigo-600 text-white rounded-full font-medium">
                      Featured
                    </span>
                  </div>
                )}
              </div>
              <div class="p-6">
                <div class="flex items-start justify-between mb-3">
                  <h3 class="text-lg font-semibold text-gray-900 dark:text-white group-hover:text-indigo-600 dark:group-hover:text-indigo-400 transition-colors duration-200">
                    {project.title}
                  </h3>
                </div>
                
                <p class="text-sm text-gray-600 dark:text-gray-300 mb-4 leading-relaxed line-clamp-3">
                  {project.description}
                </p>
                
                <!-- Technology stack -->
                <div class="flex flex-wrap gap-2 mb-6">
                  {project.technologies.map((tech: string) => (
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-md text-xs font-medium bg-indigo-50 dark:bg-indigo-900/30 text-indigo-700 dark:text-indigo-300 border border-indigo-200 dark:border-indigo-700">
                      {tech}
                    </span>
                  ))}
                </div>
                
                <!-- Action buttons -->
                <div class="flex gap-3">
                  {project.githubUrl && (
                    <a 
                      href={project.githubUrl} 
                      target="_blank" 
                      rel="noopener noreferrer" 
                      class="flex-1 inline-flex items-center justify-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-lg text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 hover:border-gray-400 dark:hover:border-gray-500 transition-all duration-200"
                    >
                      <svg class="w-4 h-4 mr-2" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M10 0C4.477 0 0 4.484 0 10.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0110 4.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.203 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.942.359.31.678.921.678 1.856 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0020 10.017C20 4.484 15.522 0 10 0z" clip-rule="evenodd"/>
                      </svg>
                      Source Code
                    </a>
                  )}
                  {project.demoUrl && (
                    <a 
                      href={project.demoUrl} 
                      target="_blank" 
                      rel="noopener noreferrer" 
                      class="flex-1 inline-flex items-center justify-center px-4 py-2 bg-indigo-600 hover:bg-indigo-700 text-white text-sm font-medium rounded-lg transition-colors duration-200"
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                      </svg>
                      Live Demo
                    </a>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </section>

    <!-- Contact CTA -->
    <section class="py-16 bg-indigo-700 dark:bg-indigo-900">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h2 class="text-3xl font-extrabold text-white sm:text-4xl">
            Interested in working together?
          </h2>
          <p class="mt-4 text-lg leading-6 text-indigo-100">
            Have a project in mind or looking for a developer to join your team?
          </p>
          <div class="mt-8 flex justify-center">
            <div class="inline-flex rounded-md shadow">
              <a href="/contact" class="inline-flex items-center justify-center px-5 py-3 border border-transparent text-base font-medium rounded-md text-indigo-600 bg-white hover:bg-gray-50">
                Contact Me
              </a>
            </div>
          </div>
        </div>
      </div>
    </section>
  </main>
  
  <Footer />
  <BackToTop />
</Layout>

<script>
  // Project filtering functionality
  document.addEventListener('DOMContentLoaded', () => {
    const filterButtons = document.querySelectorAll('.filter-btn');
    const projectCards = document.querySelectorAll('.project-card');
    
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Remove active class from all buttons
        filterButtons.forEach(btn => {
          btn.classList.remove('active', 'bg-indigo-100', 'text-indigo-800', 'dark:bg-indigo-900', 'dark:text-indigo-200');
          btn.classList.add('bg-gray-100', 'text-gray-800', 'dark:bg-gray-700', 'dark:text-gray-200');
        });
        
        // Add active class to clicked button
        button.classList.add('active', 'bg-indigo-100', 'text-indigo-800', 'dark:bg-indigo-900', 'dark:text-indigo-200');
        button.classList.remove('bg-gray-100', 'text-gray-800', 'dark:bg-gray-700', 'dark:text-gray-200');
        
        const filter = button.getAttribute('data-filter');
        
        projectCards.forEach((card: Element) => {
          const htmlCard = card as HTMLElement;
          
          if (filter === 'all') {
            htmlCard.style.display = 'block';
          } else {
            const tagsAttr = card.getAttribute('data-tags');
            if (tagsAttr) {
              const tags = tagsAttr.split(',');
              if (filter && tags.includes(filter)) {
                htmlCard.style.display = 'block';
              } else {
                htmlCard.style.display = 'none';
              }
            }
          }
        });
      });
    });
  });
</script>
