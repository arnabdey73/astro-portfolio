---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import BackToTop from '../components/BackToTop.astro';
import Button from '../components/Button.astro';
import { getPersonalInfo, getContactInfo } from '../utils/portfolio-data.js';

const personalInfo = getPersonalInfo();
const contactInfo = getContactInfo();
---

<Layout 
  title={`Contact | ${personalInfo.name} - Portfolio`}
  description={`Get in touch with ${personalInfo.name} for cloud infrastructure, DevOps projects, collaborations, or questions.`}
>
  <Header />
  
  <main class="bg-white dark:bg-gray-900">
    <!-- Hero Section -->
    <section class="relative py-12 sm:py-16 lg:py-20 overflow-hidden">
      <!-- Communication-themed Background Pattern with Blue/Purple theme -->
      <div class="absolute inset-0 bg-gradient-to-br from-blue-100 via-indigo-100 to-purple-100 dark:from-blue-900 dark:via-indigo-900 dark:to-purple-900"></div>
      
      <!-- Network & Communication Pattern with Blue/Purple colors -->
      <div class="absolute inset-0 opacity-15 dark:opacity-25">
        <svg class="w-full h-full" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 1000">
          <defs>
            <pattern id="contact-pattern" x="0" y="0" width="110" height="110" patternUnits="userSpaceOnUse">
              <g fill="none" stroke="currentColor" stroke-width="1.5" class="text-blue-600 dark:text-blue-400">
                <!-- Network nodes -->
                <circle cx="20" cy="20" r="4" fill="currentColor"/>
                <circle cx="80" cy="30" r="4" fill="currentColor"/>
                <circle cx="50" cy="70" r="4" fill="currentColor"/>
                <circle cx="90" cy="80" r="4" fill="currentColor"/>
                <!-- Network connections -->
                <path d="M24,20 L76,30" stroke-width="1.5" opacity="0.7"/>
                <path d="M20,24 L50,66" stroke-width="1.5" opacity="0.7"/>
                <path d="M50,74 L90,76" stroke-width="1.5" opacity="0.7"/>
                <path d="M80,34 L90,76" stroke-width="1.5" opacity="0.7"/>
                <!-- Message envelope -->
                <rect x="10" y="45" width="20" height="15" rx="2" fill="none" stroke="currentColor" class="text-purple-500 dark:text-purple-400"/>
                <path d="M10,45 L20,52 L30,45" fill="none" stroke="currentColor" class="text-purple-500 dark:text-purple-400"/>
                <!-- Phone/Signal waves -->
                <circle cx="70" cy="60" r="2" fill="currentColor" class="text-indigo-600 dark:text-indigo-400"/>
                <circle cx="70" cy="60" r="6" fill="none" stroke="currentColor" opacity="0.5" class="text-indigo-600 dark:text-indigo-400"/>
                <circle cx="70" cy="60" r="10" fill="none" stroke="currentColor" opacity="0.3" class="text-indigo-600 dark:text-indigo-400"/>
              </g>
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill="url(#contact-pattern)"/>
        </svg>
      </div>

      <!-- Floating Communication Elements with Blue/Purple theme -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute top-16 left-16 transform -rotate-12 opacity-25 dark:opacity-35">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-3 shadow-lg text-xs font-mono text-gray-700 dark:text-gray-300 border border-blue-200 dark:border-blue-700">
            <div class="text-blue-600 dark:text-blue-400">@</div>
            <div class="text-indigo-600 dark:text-indigo-400">mail</div>
          </div>
        </div>
        
        <div class="absolute top-32 right-20 transform rotate-12 opacity-25 dark:opacity-35">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-3 shadow-lg text-xs font-mono text-gray-700 dark:text-gray-300 border border-purple-200 dark:border-purple-700">
            <div class="text-purple-600 dark:text-purple-400">LinkedIn</div>
            <div class="text-blue-600 dark:text-blue-400">Connect</div>
          </div>
        </div>
        
        <div class="absolute bottom-32 left-24 transform -rotate-6 opacity-25 dark:opacity-35">
          <div class="bg-white dark:bg-gray-800 rounded-lg p-3 shadow-lg text-xs font-mono text-gray-700 dark:text-gray-300 border border-indigo-200 dark:border-indigo-700">
            <div class="text-indigo-600 dark:text-indigo-400">Response</div>
            <div class="text-violet-600 dark:text-violet-400">24h</div>
          </div>
        </div>
      </div>

      <!-- Animated Background Shapes with Blue/Purple theme -->
      <div class="absolute inset-0 overflow-hidden pointer-events-none">
        <div class="absolute -top-40 -left-40 w-80 h-80 bg-gradient-to-r from-blue-400 to-indigo-500 rounded-full mix-blend-multiply filter blur-xl opacity-25 animate-blob"></div>
        <div class="absolute -bottom-40 -right-40 w-80 h-80 bg-gradient-to-r from-purple-400 to-violet-500 rounded-full mix-blend-multiply filter blur-xl opacity-25 animate-blob animation-delay-2000"></div>
        <div class="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-r from-indigo-400 to-purple-500 rounded-full mix-blend-multiply filter blur-xl opacity-20 animate-blob animation-delay-4000"></div>
      </div>

      <!-- Hero Content -->
      <div class="relative z-10 max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="text-center">
          <h1 class="text-3xl font-extrabold text-gray-900 dark:text-white sm:text-4xl sm:tracking-tight lg:text-5xl">
            Get in Touch
          </h1>
          <p class="mt-6 max-w-2xl mx-auto text-xl text-gray-600 dark:text-gray-300">
            Interested in cloud solutions, DevOps consulting, or have questions about my work? Let's connect.
          </p>
        </div>
      </div>
    </section>

    <!-- Contact Form Section -->
    <section class="py-16">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="lg:grid lg:grid-cols-2 lg:gap-16">
          <!-- Contact Info -->
          <div>
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
              Contact Information
            </h2>
            <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
              Feel free to reach out through any of these channels. I'll get back to you as soon as possible.
            </p>
            
            <dl class="mt-8 space-y-6">
              <div class="flex">
                <div class="flex-shrink-0">
                  <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-600 dark:bg-indigo-500 text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <dt class="text-lg font-medium text-gray-900 dark:text-white">
                    Email
                  </dt>
                  <dd class="mt-1 text-gray-600 dark:text-gray-300">
                    <a href={`mailto:${personalInfo.email}`} class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-500">
                      {personalInfo.email}
                    </a>
                  </dd>
                </div>
              </div>
              
              <div class="flex">
                <div class="flex-shrink-0">
                  <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-600 dark:bg-indigo-500 text-white">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z" />
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <dt class="text-lg font-medium text-gray-900 dark:text-white">
                    Social Profiles
                  </dt>
                  <dd class="mt-1 text-gray-600 dark:text-gray-300">
                    <ul class="flex space-x-4">
                      {contactInfo.socialLinks.map(social => (
                        <li>
                          <a href={social.url} target="_blank" rel="noopener noreferrer" class="text-gray-600 dark:text-gray-400 hover:text-indigo-600 dark:hover:text-indigo-400">
                            <span class="sr-only">{social.platform}</span>
                            {social.icon === 'fa-github' && (
                              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path fill-rule="evenodd" d="M12 2C6.477 2 2 6.484 2 12.017c0 4.425 2.865 8.18 6.839 9.504.5.092.682-.217.682-.483 0-.237-.008-.868-.013-1.703-2.782.605-3.369-1.343-3.369-1.343-.454-1.158-1.11-1.466-1.11-1.466-.908-.62.069-.608.069-.608 1.003.07 1.531 1.032 1.531 1.032.892 1.53 2.341 1.088 2.91.832.092-.647.35-1.088.636-1.338-2.22-.253-4.555-1.113-4.555-4.951 0-1.093.39-1.988 1.029-2.688-.103-.253-.446-1.272.098-2.65 0 0 .84-.27 2.75 1.026A9.564 9.564 0 0112 6.844c.85.004 1.705.115 2.504.337 1.909-1.296 2.747-1.027 2.747-1.027.546 1.379.202 2.398.1 2.651.64.7 1.028 1.595 1.028 2.688 0 3.848-2.339 4.695-4.566 4.943.359.309.678.92.678 1.855 0 1.338-.012 2.419-.012 2.747 0 .268.18.58.688.482A10.019 10.019 0 0022 12.017C22 6.484 17.522 2 12 2z" clip-rule="evenodd" />
                              </svg>
                            )}
                            {social.icon === 'fa-linkedin' && (
                              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"></path>
                              </svg>
                            )}
                            {social.icon === 'fa-twitter' && (
                              <svg class="h-6 w-6" fill="currentColor" viewBox="0 0 24 24" aria-hidden="true">
                                <path d="M8.29 20.251c7.547 0 11.675-6.253 11.675-11.675 0-.178 0-.355-.012-.53A8.348 8.348 0 0022 5.92a8.19 8.19 0 01-2.357.646 4.118 4.118 0 001.804-2.27 8.224 8.224 0 01-2.605.996 4.107 4.107 0 00-6.993 3.743 11.65 11.65 0 01-8.457-4.287 4.106 4.106 0 001.27 5.477A4.072 4.072 0 012.8 9.713v.052a4.105 4.105 0 003.292 4.022 4.095 4.095 0 01-1.853.07 4.108 4.108 0 003.834 2.85A8.233 8.233 0 012 18.407a11.616 11.616 0 006.29 1.84"></path>
                              </svg>
                            )}
                            {social.icon === 'fa-envelope' && (
                              <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                              </svg>
                            )}
                          </a>
                        </li>
                      ))}
                    </ul>
                  </dd>
                </div>
              </div>
              
              <!-- Calendly Section -->
              <div class="flex">
                <div class="flex-shrink-0">
                  <div class="flex items-center justify-center h-12 w-12 rounded-md bg-indigo-600 dark:bg-indigo-500 text-white">
                    <svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
                    </svg>
                  </div>
                </div>
                <div class="ml-4">
                  <dt class="text-lg font-medium text-gray-900 dark:text-white">
                    Schedule a Call
                  </dt>
                  <dd class="mt-1 text-gray-600 dark:text-gray-300">
                    <p>Book a free 30-minute consultation to discuss your project needs.</p>
                    <p class="mt-3">                    <a 
                      href="https://calendly.com/arnab-dey/30min" 
                      target="_blank" 
                      rel="noopener noreferrer"
                      class="inline-flex items-center justify-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200"
                    >
                      <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/>
                      </svg>
                      Open My Calendly
                      </a>
                    </p>
                  </dd>
                </div>
              </div>
            </dl>
          </div>
          
          <!-- Contact Form -->
          <div class="mt-12 lg:mt-0">
            <h2 class="text-2xl font-bold text-gray-900 dark:text-white">
              Send a Message
            </h2>
            <p class="mt-4 text-lg text-gray-600 dark:text-gray-300">
              Have a specific question or project in mind? Fill out this form and I'll get back to you soon.
            </p>
            
            <form class="mt-8 space-y-6" id="contact-form" method="POST" name="contact" data-netlify="true">
              <!-- Netlify form identifier -->
              <input type="hidden" name="form-name" value="contact" />
              
              <!-- Honeypot field for spam protection -->
              <div class="hidden">
                <label>Don't fill this out if you're human: <input name="_gotcha" /></label>
              </div>
              
              <div class="grid grid-cols-1 sm:grid-cols-2 gap-6">
                <div>
                  <label for="name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Name *
                  </label>
                  <div class="mt-1">
                    <input
                      type="text"
                      name="name"
                      id="name"
                      required
                      class="py-3 px-4 block w-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white transition-colors duration-200"
                      placeholder="Your full name"
                    />
                    <div class="error-message hidden text-red-600 text-sm mt-1" id="name-error"></div>
                  </div>
                </div>
                
                <div>
                  <label for="email" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                    Email *
                  </label>
                  <div class="mt-1">
                    <input
                      type="email"
                      name="email"
                      id="email"
                      required
                      class="py-3 px-4 block w-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white transition-colors duration-200"
                      placeholder="your@email.com"
                    />
                    <div class="error-message hidden text-red-600 text-sm mt-1" id="email-error"></div>
                  </div>
                </div>
              </div>
              
              <div>
                <label for="subject" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Subject *
                </label>
                <div class="mt-1">
                  <select
                    name="subject"
                    id="subject"
                    required
                    class="py-3 px-4 block w-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white transition-colors duration-200"
                  >
                    <option value="">Select a subject</option>
                    <option value="project-inquiry">Project Inquiry</option>
                    <option value="collaboration">Collaboration Opportunity</option>
                    <option value="consulting">Consulting Services</option>
                    <option value="technical-question">Technical Question</option>
                    <option value="other">Other</option>
                  </select>
                  <div class="error-message hidden text-red-600 text-sm mt-1" id="subject-error"></div>
                </div>
              </div>
              
              <div>
                <label for="budget" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Project Budget (Optional)
                </label>
                <div class="mt-1">
                  <select
                    name="budget"
                    id="budget"
                    class="py-3 px-4 block w-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white transition-colors duration-200"
                  >
                    <option value="">Select budget range</option>
                    <option value="under-5k">Under $5,000</option>
                    <option value="5k-10k">$5,000 - $10,000</option>
                    <option value="10k-25k">$10,000 - $25,000</option>
                    <option value="25k-50k">$25,000 - $50,000</option>
                    <option value="50k-plus">$50,000+</option>
                    <option value="discuss">Let's discuss</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label for="timeline" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Project Timeline (Optional)
                </label>
                <div class="mt-1">
                  <select
                    name="timeline"
                    id="timeline"
                    class="py-3 px-4 block w-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white transition-colors duration-200"
                  >
                    <option value="">Select timeline</option>
                    <option value="asap">ASAP</option>
                    <option value="1-month">Within 1 month</option>
                    <option value="2-3-months">2-3 months</option>
                    <option value="3-6-months">3-6 months</option>
                    <option value="flexible">Flexible</option>
                  </select>
                </div>
              </div>
              
              <div>
                <label for="message" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                  Message *
                </label>
                <div class="mt-1">
                  <textarea
                    name="message"
                    id="message"
                    rows="6"
                    required
                    class="py-3 px-4 block w-full shadow-sm focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 border-gray-300 dark:border-gray-600 rounded-lg dark:bg-gray-800 dark:text-white transition-colors duration-200 resize-none"
                    placeholder="Tell me about your project, question, or how I can help you..."
                  ></textarea>
                  <div class="error-message hidden text-red-600 text-sm mt-1" id="message-error"></div>
                  <div class="text-sm text-gray-500 dark:text-gray-400 mt-1">
                    <span id="message-count">0</span>/1000 characters
                  </div>
                </div>
              </div>
              
              <div class="flex items-start">
                <input
                  id="privacy-policy"
                  name="privacy-policy"
                  type="checkbox"
                  required
                  class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 dark:border-gray-600 rounded mt-1"
                />
                <label for="privacy-policy" class="ml-3 block text-sm text-gray-700 dark:text-gray-300">
                  I agree to the <a href="/privacy" class="text-indigo-600 dark:text-indigo-400 hover:text-indigo-500 underline">privacy policy</a> and understand that my information will be used to respond to my inquiry.
                </label>
              </div>
              
              <!-- Success/Error Messages -->
              <div id="form-success" class="hidden p-4 rounded-lg bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-700">
                <div class="flex">
                  <svg class="w-5 h-5 text-green-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd"></path>
                  </svg>
                  <div class="ml-3">
                    <p class="text-sm font-medium text-green-800 dark:text-green-200">
                      Message sent successfully!
                    </p>
                    <p id="success-message" class="text-sm text-green-700 dark:text-green-300 mt-1">
                      Thank you for reaching out. I'll get back to you within 24-48 hours.
                    </p>
                  </div>
                </div>
              </div>
              
              <div id="form-error" class="hidden p-4 rounded-lg bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-700">
                <div class="flex">
                  <svg class="w-5 h-5 text-red-400 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
                  </svg>
                  <div class="ml-3">
                    <p class="text-sm font-medium text-red-800 dark:text-red-200">
                      Something went wrong
                    </p>
                    <p class="text-sm text-red-700 dark:text-red-300 mt-1" id="error-details">
                      Please try again or contact me directly via email.
                    </p>
                  </div>
                </div>
              </div>
              
              <div>
                <button
                  type="submit"
                  id="submit-btn"
                  class="w-full inline-flex items-center justify-center px-6 py-3 border border-transparent rounded-lg shadow-sm text-base font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-all duration-200 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                >
                  <span id="submit-text">Send Message</span>
                  <svg id="submit-loading" class="hidden animate-spin ml-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                  </svg>
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
    </section>

    <!-- Services CTA Section -->
    <section class="py-16 bg-gray-50 dark:bg-gray-800">
      <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
        <div class="max-w-3xl mx-auto">
          <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-4">
            Need a Quote for Your Project?
          </h2>
          <p class="text-xl text-gray-600 dark:text-gray-300 mb-8">
            Check out our interactive service estimator to get instant pricing for your DevOps and cloud engineering needs.
          </p>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
            <div class="bg-white dark:bg-gray-900 rounded-lg p-6 shadow-lg">
              <div class="w-12 h-12 bg-indigo-100 dark:bg-indigo-900 rounded-lg flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-indigo-600 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
                </svg>
              </div>
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Interactive Calculator</h3>
              <p class="text-gray-600 dark:text-gray-300">Get instant cost estimates based on your specific requirements</p>
            </div>
            
            <div class="bg-white dark:bg-gray-900 rounded-lg p-6 shadow-lg">
              <div class="w-12 h-12 bg-green-100 dark:bg-green-900 rounded-lg flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"/>
                </svg>
              </div>
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Quick Turnaround</h3>
              <p class="text-gray-600 dark:text-gray-300">Get detailed quotes within 24 hours of estimation</p>
            </div>
            
            <div class="bg-white dark:bg-gray-900 rounded-lg p-6 shadow-lg">
              <div class="w-12 h-12 bg-purple-100 dark:bg-purple-900 rounded-lg flex items-center justify-center mx-auto mb-4">
                <svg class="w-6 h-6 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
              </div>
              <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-2">Transparent Pricing</h3>
              <p class="text-gray-600 dark:text-gray-300">No hidden fees, clear breakdown of all costs</p>
            </div>
          </div>
          
          <a 
            href="/services" 
            class="inline-flex items-center px-8 py-4 bg-indigo-600 hover:bg-indigo-700 text-white font-medium rounded-lg transition-colors shadow-lg hover:shadow-xl"
          >
            <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"/>
            </svg>
            Get Service Estimate
          </a>
        </div>
      </div>
    </section>
              </button>
              <div class="faq-content hidden px-6 py-4 bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
                <p class="text-gray-800 dark:text-gray-200">
                  Yes, I have extensive experience with emergency project interventions and technical rescue missions. I can step in quickly to:
                </p>
                <ul class="list-disc list-inside text-gray-800 dark:text-gray-200 mt-2">
                  <li>Diagnose and fix issues in complex cloud infrastructures</li>
                  <li>Resolve critical outages and performance bottlenecks</li>
                  <li>Fix failing CI/CD pipelines and deployment processes</li>
                  <li>Provide recommendations for immediate stability and long-term improvements</li>
                </ul>
                <p class="mt-2 text-gray-800 dark:text-gray-200">
                  For urgent issues, I can often provide initial assessment within 24-48 hours. Please note that emergency interventions typically have expedited rates.
                </p>
              </div>
            </div>
            
            <!-- FAQ Item 8 - NEW -->
            <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
              <button class="faq-toggle w-full flex justify-between items-center px-6 py-4 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 focus:outline-none">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white text-left">Do you offer training or knowledge transfer?</h3>
                <svg class="faq-icon h-6 w-6 text-indigo-600 dark:text-indigo-400 transform transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <div class="faq-content hidden px-6 py-4 bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
                <p class="text-gray-800 dark:text-gray-200">
                  Absolutely! Knowledge transfer is a crucial part of my engagement model. I offer:
                </p>
                <ul class="list-disc list-inside text-gray-800 dark:text-gray-200 mt-2">
                  <li>Customized workshops on cloud technologies, DevOps practices, and platform engineering</li>
                  <li>Pair programming sessions with your team to transfer practical knowledge</li>
                  <li>Comprehensive documentation of all implemented solutions</li>
                  <li>Post-implementation support and mentoring phases</li>
                </ul>
                <p class="mt-2 text-gray-800 dark:text-gray-200">
                  I believe in empowering your team to maintain and extend the solutions I build, rather than creating dependencies.
                </p>
              </div>
            </div>
            
            <!-- FAQ Item 9 - NEW -->
            <div class="border border-gray-200 dark:border-gray-700 rounded-lg overflow-hidden">
              <button class="faq-toggle w-full flex justify-between items-center px-6 py-4 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors duration-200 focus:outline-none">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white text-left">What makes your approach different?</h3>
                <svg class="faq-icon h-6 w-6 text-indigo-600 dark:text-indigo-400 transform transition-transform duration-200" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                </svg>
              </button>
              <div class="faq-content hidden px-6 py-4 bg-gray-50 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-700">
                <p class="text-gray-800 dark:text-gray-200">
                  My approach combines deep technical expertise with a business-focused mindset:
                </p>
                <ul class="list-disc list-inside text-gray-800 dark:text-gray-200 mt-2">
                  <li><strong>Holistic solutions</strong> - I consider the full technology lifecycle, not just the immediate task</li>
                  <li><strong>Focus on automation</strong> - I build self-healing, self-documenting infrastructure that reduces long-term maintenance costs</li>
                  <li><strong>Pragmatic implementation</strong> - I balance ideal architecture with practical realities like timelines and budget constraints</li>
                  <li><strong>Security-first mindset</strong> - Security is integrated from the start, not added as an afterthought</li>
                </ul>
                <p class="mt-2 text-gray-800 dark:text-gray-200">
                  I also prioritize transparent communication and focus on delivering business value rather than just technical solutions.
                </p>
              </div>
            </div>
          </div>
        </section>
      </div>
    </section>
  </main>
  
  <Footer />
  <BackToTop />
</Layout>

<script>
  // Contact form functionality
  document.addEventListener('DOMContentLoaded', () => {
    const contactForm = document.getElementById('contact-form') as HTMLFormElement;
    const submitBtn = document.getElementById('submit-btn') as HTMLButtonElement;
    const submitText = document.getElementById('submit-text') as HTMLElement;
    const submitLoading = document.getElementById('submit-loading') as HTMLElement;
    const formSuccess = document.getElementById('form-success') as HTMLElement;
    const formError = document.getElementById('form-error') as HTMLElement;
    const errorDetails = document.getElementById('error-details') as HTMLElement;
    const messageTextarea = document.getElementById('message') as HTMLTextAreaElement;
    const messageCount = document.getElementById('message-count') as HTMLElement;

    // Character counter for message field
    messageTextarea?.addEventListener('input', () => {
      const count = messageTextarea.value.length;
      messageCount.textContent = count.toString();
      
      if (count > 1000) {
        messageTextarea.classList.add('border-red-500');
        messageCount.classList.add('text-red-500');
      } else {
        messageTextarea.classList.remove('border-red-500');
        messageCount.classList.remove('text-red-500');
      }
    });

    // Form validation
    function validateForm(): boolean {
      let isValid = true;
      const errors: { [key: string]: string } = {};

      // Name validation
      const name = (document.getElementById('name') as HTMLInputElement).value.trim();
      if (!name) {
        errors.name = 'Name is required';
        isValid = false;
      } else if (name.length < 2) {
        errors.name = 'Name must be at least 2 characters';
        isValid = false;
      }

      // Email validation
      const email = (document.getElementById('email') as HTMLInputElement).value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!email) {
        errors.email = 'Email is required';
        isValid = false;
      } else if (!emailRegex.test(email)) {
        errors.email = 'Please enter a valid email address';
        isValid = false;
      }

      // Subject validation
      const subject = (document.getElementById('subject') as HTMLSelectElement).value;
      if (!subject) {
        errors.subject = 'Please select a subject';
        isValid = false;
      }

      // Message validation
      const message = (document.getElementById('message') as HTMLTextAreaElement).value.trim();
      if (!message) {
        errors.message = 'Message is required';
        isValid = false;
      } else if (message.length < 10) {
        errors.message = 'Message must be at least 10 characters';
        isValid = false;
      } else if (message.length > 1000) {
        errors.message = 'Message must be less than 1000 characters';
        isValid = false;
      }

      // Display errors
      Object.keys(errors).forEach(field => {
        const errorElement = document.getElementById(`${field}-error`);
        const inputElement = document.getElementById(field);
        
        if (errorElement && inputElement) {
          errorElement.textContent = errors[field];
          errorElement.classList.remove('hidden');
          inputElement.classList.add('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
        }
      });

      // Clear errors for valid fields
      ['name', 'email', 'subject', 'message'].forEach(field => {
        if (!errors[field]) {
          const errorElement = document.getElementById(`${field}-error`);
          const inputElement = document.getElementById(field);
          
          if (errorElement && inputElement) {
            errorElement.classList.add('hidden');
            inputElement.classList.remove('border-red-500', 'focus:border-red-500', 'focus:ring-red-500');
          }
        }
      });

      return isValid;
    }

    // Show loading state
    function setLoadingState(loading: boolean) {
      if (loading) {
        submitBtn.disabled = true;
        submitText.textContent = 'Sending...';
        submitLoading.classList.remove('hidden');
      } else {
        submitBtn.disabled = false;
        submitText.textContent = 'Send Message';
        submitLoading.classList.add('hidden');
      }
    }

    // Show success message
    function showSuccess(message: string = 'Thank you for your message! I\'ll get back to you as soon as possible.') {
      formSuccess.classList.remove('hidden');
      formError.classList.add('hidden');
      const successMessage = document.querySelector('#success-message');
      if (successMessage) {
        successMessage.textContent = message;
      }
      formSuccess.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // Show error message
    function showError(message: string = 'Please try again or contact me directly via email.') {
      formError.classList.remove('hidden');
      formSuccess.classList.add('hidden');
      errorDetails.textContent = message;
      formError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // Submit form to Netlify Forms (primary method for static sites)
    async function submitToNetlify(formData: FormData): Promise<boolean> {
      try {
        // Add Netlify form identifier
        formData.append('form-name', 'contact');
        
        const response = await fetch('/', {
          method: 'POST',
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
          body: new URLSearchParams(formData as any).toString()
        });
        
        if (response.ok) {
          console.log('Form submitted successfully via Netlify');
          return true;
        } else {
          console.error('Netlify submission failed:', response.status);
          return false;
        }
      } catch (error) {
        console.error('Netlify submission error:', error);
        return false;
      }
    }

    // Submit form to Formspree with better error handling
    async function submitToFormspree(formData: FormData): Promise<boolean> {
      try {
        // Use a simple, reliable approach with proper error handling
        const response = await fetch('https://formspree.io/f/xkgnqgdd', {
          method: 'POST',
          body: formData,
          headers: {
            'Accept': 'application/json'
          }
        });
        
        if (response.ok) {
          const result = await response.json();
          if (result.ok !== false) { // Formspree returns ok: false on error
            console.log('Form submitted successfully via Formspree');
            return true;
          }
        }
        
        console.error('Formspree submission failed:', response.status);
        return false;
      } catch (error) {
        console.error('Formspree submission error:', error);
        return false;
      }
    }

    // Submit to a simple contact form service
    async function submitToSimpleForm(formData: FormData): Promise<boolean> {
      try {
        // Try a different approach - submit to formsubmit.co
        const submitData = new FormData();
        submitData.append('name', formData.get('name') as string);
        submitData.append('email', formData.get('email') as string);
        submitData.append('subject', formData.get('subject') as string);
        submitData.append('message', formData.get('message') as string);
        submitData.append('_next', window.location.href);
        submitData.append('_captcha', 'false');
        submitData.append('_template', 'table');
        
        const response = await fetch('https://formsubmit.co/138567a5fea18e8938aa5dfa0a81019e', {
          method: 'POST',
          body: submitData
        });
        
        if (response.ok) {
          console.log('Form submitted successfully via FormSubmit');
          return true;
        }
        
        console.error('FormSubmit submission failed:', response.status);
        return false;
      } catch (error) {
        console.error('FormSubmit submission error:', error);
        return false;
      }
    }

    // Enhanced email fallback with immediate activation
    function submitViaEmailDirect(formData: FormData): boolean {
      try {
        const name = formData.get('name') as string;
        const email = formData.get('email') as string;
        const subject = formData.get('subject') as string;
        const message = formData.get('message') as string;
        const budget = formData.get('budget') as string;
        const timeline = formData.get('timeline') as string;
        
        const emailSubject = `Contact Form: ${subject}`;
        const emailBody = `Name: ${name}\nEmail: ${email}\nSubject: ${subject}\nBudget: ${budget || 'Not specified'}\nTimeline: ${timeline || 'Not specified'}\n\nMessage:\n${message}`;
        
        const contactEmail = 'mail@arnabdey.dev';
        
        // Show manual instructions immediately
        showManualEmailInstructions(formData);
        
        // Try to open email clients
        const gmailUrl = `https://mail.google.com/mail/?view=cm&fs=1&to=${contactEmail}&su=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`;
        const mailtoUrl = `mailto:${contactEmail}?subject=${encodeURIComponent(emailSubject)}&body=${encodeURIComponent(emailBody)}`;
        
        // Try Gmail first
        const gmailWindow = window.open(gmailUrl, '_blank');
        
        // If Gmail popup was blocked, try mailto after a short delay
        setTimeout(() => {
          if (!gmailWindow || gmailWindow.closed) {
            try {
              window.location.href = mailtoUrl;
            } catch (e) {
              console.log('Mailto fallback also failed, using manual instructions only');
            }
          }
        }, 1000);
        
        console.log('Email fallback activated with manual instructions');
        return true;
      } catch (error) {
        console.error('Email fallback error:', error);
        showManualEmailInstructions(formData);
        return true; // Always return true because we provide manual instructions
      }
    }
    
    // Show manual email instructions when automated methods fail
    function showManualEmailInstructions(formData: FormData) {
      const name = formData.get('name') as string;
      const email = formData.get('email') as string;
      const subject = formData.get('subject') as string;
      const message = formData.get('message') as string;
      const budget = formData.get('budget') as string;
      const timeline = formData.get('timeline') as string;
      const contactEmail = 'mail@arnabdey.dev';
      
      const instructionsHtml = `
        <div class="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 border-2 border-blue-200 dark:border-blue-700 rounded-xl p-6 mt-6 shadow-lg">
          <div class="flex items-center mb-4">
            <svg class="w-8 h-8 text-blue-600 dark:text-blue-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
            </svg>
            <h4 class="text-xl font-bold text-blue-800 dark:text-blue-200">📧 Email Instructions</h4>
          </div>
          
          <p class="text-blue-700 dark:text-blue-300 mb-4 text-lg">
            <strong>Quick Action Required:</strong> Please send your message to <strong class="text-blue-900 dark:text-blue-100">${contactEmail}</strong>
          </p>
          
          <div class="grid md:grid-cols-2 gap-4 mb-4">
            <div class="bg-white dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-lg p-4">
              <h5 class="font-semibold text-gray-800 dark:text-gray-200 mb-2">📱 Quick Options:</h5>
              <div class="space-y-2">
                <a href="https://mail.google.com/mail/?view=cm&fs=1&to=${contactEmail}&su=${encodeURIComponent('Contact Form: ' + subject)}&body=${encodeURIComponent('Name: ' + name + '\\nEmail: ' + email + '\\nSubject: ' + subject + '\\nBudget: ' + (budget || 'Not specified') + '\\nTimeline: ' + (timeline || 'Not specified') + '\\n\\nMessage:\\n' + message)}" 
                   target="_blank" 
                   class="block w-full text-center bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                  📧 Open Gmail
                </a>
                <a href="mailto:${contactEmail}?subject=${encodeURIComponent('Contact Form: ' + subject)}&body=${encodeURIComponent('Name: ' + name + '\\nEmail: ' + email + '\\nSubject: ' + subject + '\\nBudget: ' + (budget || 'Not specified') + '\\nTimeline: ' + (timeline || 'Not specified') + '\\n\\nMessage:\\n' + message)}" 
                   class="block w-full text-center bg-gray-600 hover:bg-gray-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                  📱 Open Email App
                </a>
                <button onclick="copyEmailContent()" 
                        class="w-full bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                  📋 Copy Email Content
                </button>
              </div>
            </div>
            
            <div class="bg-white dark:bg-gray-800 border-2 border-gray-200 dark:border-gray-600 rounded-lg p-4">
              <h5 class="font-semibold text-gray-800 dark:text-gray-200 mb-2">✉️ Email Details:</h5>
              <div class="text-sm font-mono space-y-1 text-gray-700 dark:text-gray-300">
                <div><strong>To:</strong> ${contactEmail}</div>
                <div><strong>Subject:</strong> Contact Form: ${subject}</div>
                <div class="mt-2"><strong>Message:</strong></div>
                <div class="bg-gray-50 dark:bg-gray-700 p-2 rounded text-xs">
                  Name: ${name}<br>
                  Email: ${email}<br>
                  Subject: ${subject}<br>
                  Budget: ${budget || 'Not specified'}<br>
                  Timeline: ${timeline || 'Not specified'}<br><br>
                  Message:<br>${message}
                </div>
              </div>
            </div>
          </div>
          
          <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-700 rounded-lg p-3">
            <p class="text-yellow-800 dark:text-yellow-200 text-sm">
              <strong>💡 Tip:</strong> Click "Open Gmail" or "Open Email App" above for the fastest way to send your message. 
              Your email content is already prepared!
            </p>
          </div>
        </div>
      `;
      
      // Remove any existing instructions
      const existingInstructions = document.getElementById('email-instructions');
      if (existingInstructions) {
        existingInstructions.remove();
      }
      
      // Insert instructions after the form
      const formElement = document.getElementById('contact-form');
      if (formElement && formElement.parentNode) {
        const instructionsDiv = document.createElement('div');
        instructionsDiv.innerHTML = instructionsHtml;
        instructionsDiv.id = 'email-instructions';
        formElement.parentNode.insertBefore(instructionsDiv, formElement.nextSibling);
        
        // Scroll to instructions
        setTimeout(() => {
          instructionsDiv.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }, 100);
      }
    }

    // Submit form to custom API endpoint (fallback for server deployments)
    async function submitToAPI(formData: FormData): Promise<boolean> {
      try {
        const response = await fetch('/api/contact', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          console.error('API request failed:', response.status, response.statusText);
          return false;
        }
        
        const result = await response.json();
        
        if (result.success) {
          console.log('Form submitted successfully:', result.mode);
          return true;
        } else {
          console.error('API error:', result.error);
          return false;
        }
      } catch (error) {
        console.error('Form submission error:', error);
        return false;
      }
    }

    // Submit form to Web3Forms (additional backup method)
    async function submitToWeb3Forms(formData: FormData): Promise<boolean> {
      try {
        // Skip Web3Forms for now since it requires API key setup
        console.log('Web3Forms skipped - requires API key setup');
        return false;
      } catch (error) {
        console.error('Web3Forms submission error:', error);
        return false;
      }
    }

    // Submit form to EmailJS (alternative)
    async function submitToEmailJS(formData: FormData): Promise<boolean> {
      try {
        // Simplified email submission using a mailto approach as backup
        const emailData = {
          to: 'mail@arnabdey.dev',
          subject: `Contact Form: ${formData.get('subject')}`,
          body: `Name: ${formData.get('name')}\nEmail: ${formData.get('email')}\nSubject: ${formData.get('subject')}\nBudget: ${formData.get('budget') || 'Not specified'}\nTimeline: ${formData.get('timeline') || 'Not specified'}\n\nMessage:\n${formData.get('message')}`
        };
        
        // Use a simple POST to a generic form handler
        const response = await fetch('https://httpbin.org/post', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(emailData)
        });
        
        if (response.ok) {
          console.log('Form data processed via generic handler');
          return true; // This is just for testing - won't actually send email
        }
        
        return false;
      } catch (error) {
        console.error('EmailJS submission error:', error);
        return false;
      }
    }

    // Form submission handler
    contactForm?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      // Hide previous messages
      formSuccess.classList.add('hidden');
      formError.classList.add('hidden');
      
      // Validate form
      if (!validateForm()) {
        return;
      }
      
      setLoadingState(true);
      
      const formData = new FormData(contactForm);
      let success = false;
      
      // Try multiple submission methods in order
      console.log('Attempting form submission...');
      
      // 1. Try Netlify Forms (works if deployed on Netlify)
      success = await submitToNetlify(formData);
      
      // 2. If Netlify fails, try Formspree
      if (!success) {
        console.log('Netlify failed, trying Formspree...');
        success = await submitToFormspree(formData);
      }
      
      // 3. If Formspree fails, try FormSubmit
      if (!success) {
        console.log('Formspree failed, trying FormSubmit...');
        success = await submitToSimpleForm(formData);
      }
      
      // 4. If FormSubmit fails, try custom API
      if (!success) {
        console.log('FormSubmit failed, trying custom API...');
        success = await submitToAPI(formData);
      }
      
      setLoadingState(false);
      
      if (success) {
        showSuccess();
        contactForm.reset();
        messageCount.textContent = '0';
      } else {
        // 5. Enhanced email fallback with immediate activation
        console.log('All automated methods failed, activating enhanced email fallback...');
        submitViaEmailDirect(formData);
        showSuccess('Form submission activated! Please check the instructions below or use the email buttons to send your message.');
      }
    });

    // FAQ toggle functionality
    const faqToggles = document.querySelectorAll('.faq-toggle');
    
    if (faqToggles.length > 0) {
      faqToggles.forEach(toggle => {
        toggle.addEventListener('click', () => {
          const content = toggle.nextElementSibling as HTMLElement;
          const icon = toggle.querySelector('.faq-icon') as HTMLElement;
          
          // Toggle content visibility
          content?.classList.toggle('hidden');
          
          // Rotate icon
          icon?.classList.toggle('rotate-180');
        });
      });
    }

    // Global function for copying email content
    (window as any).copyEmailContent = function() {
      const instructionsDiv = document.getElementById('email-instructions');
      if (instructionsDiv) {
        const codeBlock = instructionsDiv.querySelector('.font-mono');
        if (codeBlock) {
          const textContent = codeBlock.textContent || '';
          navigator.clipboard.writeText(textContent).then(() => {
            const copyBtn = instructionsDiv.querySelector('button');
            if (copyBtn) {
              const originalText = copyBtn.textContent;
              copyBtn.textContent = 'Copied!';
              setTimeout(() => {
                copyBtn.textContent = originalText;
              }, 2000);
            }
          }).catch(() => {
            // Fallback for older browsers
            const textArea = document.createElement('textarea');
            textArea.value = textContent;
            document.body.appendChild(textArea);
            textArea.select();
            document.execCommand('copy');
            document.body.removeChild(textArea);
            alert('Email content copied to clipboard!');
          });
        }
      }
    };
  });
</script>
